#!/usr/bin/env python3
"""Remove build paths, customize 'component' field
"""

import traceback, sys, os
from util import *

msvc = False

def define_component(parts):
    file = parts[int(Column.File)].replace("\\", r"/")
    if "include/QtMultimedia" in file:
        return "CsMultimedia"
    if "include/QtCore" in file:
        return "CsCore"
    if "/src/core" in file:
        return "CsCore"
    if "include/QtGui" in file:
        return "CsGui"
    if "/webkit" in file:
        return "webkit"
    if "/WebCore" in file:
        return "WebCore"
    if "/src/gui/" in file:
        return "CsGui"
    if "/src/multimedia/" in file:
        return "multimedia"
    if "/src/network/" in file:
        return "network"
    if "/src/opengl/" in file:
        return "opengl"
    if "/src/plugins/" in file:
        return "plugins"
    if "/src/script/" in file:
        return "script"
    if "/src/svg/" in file:
        return "svg"
    if "/src/xmlpatterns/" in file:
        return "xmlpatterns"
    if "/src/xml/" in file:
        return "xml"
    if "/src/tools/" in file:
        return "tools"
    if "/3rdparty" in file:
        return "3rdparty"
    if "/MSVC" in file:
        return "MSVC"
    return ""

def get_substring_end_position(needle, haystack):
    position = haystack.find(needle)
    if position == -1:
        return 0
    return position + len(needle)
    
def remove_pattern(input_string, pattern):
    # Search for the pattern in the input string
    match = re.search(pattern, input_string)

    # If the pattern is found, return the end-position
    if match:
        start, end_index = match.span()
        return end_index
    else:
        # If the pattern is not found, return -1
        return -1
        
# notice [[marker]] is prefixed to indicate the path needs to be fixed 
# by create_default_link()
def remove_build_path(parts):
    file = parts[int(Column.File)]
    uniform_filepath = file.replace("\\", r"/")
    build_path = "/include/Qt"
    position = uniform_filepath.find(build_path)
    if position != -1:
        return "<<buildpath>" + file[position:]

    build_path = "/privateinclude/Qt"
    position = uniform_filepath.find(build_path)
    if position != -1:
        return "<<buildpath>" + file[position:]

    source_path = "copperspice/src/"
    position = uniform_filepath.find(source_path)
    if position != -1:
        position += len("copperspice")
        return "[[marker]]" + file[position:]
    
    end_position = remove_pattern(file, r".*Program\sFiles/Microsoft.*/\d+/\w+/")
    if end_position != -1:
        return file[end_position:]
    
    # remove X:\ 
    if re.search(r'\w:\\', file):
        return file[3:]
    
    return file    

def create_default_link(parts):
    file = parts[int(Column.File)]
    name, linenumber = file.split(":")
    
    url = urljoin("[[permalink-prefix]]", name.replace("\\", "/"))
    links = create_link(3, url)
    
    # check for positive line number
    if str.isdigit(linenumber):
        links = create_link(3, url + "#L" + str(linenumber))
    return links


def customize(line):
    global msvc
    parts = line.strip().split("|")
    parts[int(Column.Component)] = define_component(parts)
    if msvc:
        parts[int(Column.File)] = remove_build_path(parts).replace("/", "\\")
    else:
        parts[int(Column.File)] = remove_build_path(parts)
    
    file = parts[int(Column.File)]
    if file.startswith("[[marker]]"):
        length = len("[[marker]]")    
        parts[int(Column.File)] = file[length:]
        parts[int(Column.Link)] = parts[int(Column.Link)] + create_default_link(parts)
    writeStructuredLine(parts)


def show_usage():
    eprint("Usage: " + os.path.basename(__file__) + "[/msvc]")
    eprint("   /msvc transform unix paths generated by lexers/parsers also to windows style paths")
    eprint("   will customize structured CSV, according to user-specific rulesm, see customize()")


def main():
    global msvc
    if len(sys.argv) > 1:
        msvc = True
        
    for line in sys.stdin:
        customize(line)


if __name__ == "__main__":
    try:
        main()
    except SystemExit:
        raise
    except:
        info = traceback.format_exc()
        eprint(info)
        show_usage()
        sys.exit(1)
